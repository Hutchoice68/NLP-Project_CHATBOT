"""
Test Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Core Service
‡∏£‡∏±‡∏ô: python test_client.py
"""
import requests
import json
from colorama import Fore, Style, init

# ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô colorama
init(autoreset=True)

AI_CORE_URL = "http://localhost:8001"

def print_header():
    """‡πÅ‡∏™‡∏î‡∏á header"""
    print(f"\n{Fore.CYAN}{'='*60}")
    print(f"{Fore.CYAN}ü§ñ AI Core Test Client")
    print(f"{Fore.CYAN}{'='*60}\n")

def check_health():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á AI Core"""
    try:
        response = requests.get(f"{AI_CORE_URL}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"{Fore.GREEN}‚úÖ AI Core is healthy")
            print(f"{Fore.YELLOW}   Status: {data.get('status')}")
            print(f"{Fore.YELLOW}   Model: {data.get('model_loaded')}")
            return True
        else:
            print(f"{Fore.RED}‚ùå AI Core returned status {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print(f"{Fore.RED}‚ùå Cannot connect to AI Core at {AI_CORE_URL}")
        print(f"{Fore.YELLOW}   Make sure AI Core is running:")
        print(f"{Fore.YELLOW}   uvicorn ai_core:app --host 0.0.0.0 --port 8001")
        return False
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error: {e}")
        return False

def send_message(message, user_id="test_user", platform="test"):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI Core"""
    try:
        payload = {
            "message": message,
            "user_id": user_id,
            "platform": platform
        }
        
        print(f"\n{Fore.BLUE}üì§ Sending: {Fore.WHITE}{message}")
        
        response = requests.post(
            f"{AI_CORE_URL}/chat",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"{Fore.GREEN}üì• Response: {Fore.WHITE}{data['response']}")
            print(f"{Fore.YELLOW}   Intent: {data.get('intent', 'unknown')}")
            print(f"{Fore.YELLOW}   Confidence: {data.get('confidence', 0.0):.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if data.get('data'):
                print(f"{Fore.CYAN}   Data: {json.dumps(data['data'], ensure_ascii=False, indent=2)}")
            
            return data
        else:
            print(f"{Fore.RED}‚ùå Error: Status {response.status_code}")
            print(f"{Fore.RED}   {response.text}")
            return None
            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error: {e}")
        return None

def run_test_scenarios():
    """‡∏£‡∏±‡∏ô‡∏ä‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print(f"\n{Fore.CYAN}üß™ Running Test Scenarios...")
    print(f"{Fore.CYAN}{'='*60}\n")
    
    test_cases = [
        ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "greeting"),
        ("‡∏°‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÑ‡∏´‡∏°", "ask_info"),
        ("‡∏Ç‡∏≠‡∏î‡∏π‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡πâ‡∏≤‡πÉ‡∏ö", "ask_info"),
        ("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏¢‡∏µ‡∏ô‡∏™‡πå‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà", "ask_info"),
        ("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "order_product"),
        ("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "refund_request"),
        ("‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞", "help_request"),
        ("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞", "thank_you"),
    ]
    
    results = []
    for message, expected_intent in test_cases:
        response = send_message(message)
        if response:
            actual_intent = response.get('intent')
            match = "‚úÖ" if actual_intent == expected_intent else "‚ùå"
            results.append({
                "message": message,
                "expected": expected_intent,
                "actual": actual_intent,
                "match": match
            })
        print()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print(f"\n{Fore.CYAN}üìä Test Results Summary")
    print(f"{Fore.CYAN}{'='*60}\n")
    
    for result in results:
        color = Fore.GREEN if result['match'] == "‚úÖ" else Fore.RED
        print(f"{color}{result['match']} {result['message']}")
        print(f"   Expected: {result['expected']}, Got: {result['actual']}")
    
    correct = sum(1 for r in results if r['match'] == "‚úÖ")
    total = len(results)
    accuracy = (correct / total * 100) if total > 0 else 0
    
    print(f"\n{Fore.YELLOW}Accuracy: {correct}/{total} ({accuracy:.1f}%)")

def interactive_mode():
    """‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö Interactive"""
    print(f"\n{Fore.CYAN}üí¨ Interactive Chat Mode")
    print(f"{Fore.CYAN}{'='*60}")
    print(f"{Fore.YELLOW}Type 'quit' or 'exit' to stop\n")
    
    user_id = f"test_user_{requests.get('http://localhost:8001').elapsed.microseconds}"
    
    while True:
        try:
            message = input(f"{Fore.GREEN}You: {Style.RESET_ALL}")
            
            if message.lower() in ['quit', 'exit', 'q']:
                print(f"{Fore.YELLOW}Goodbye! üëã")
                break
            
            if not message.strip():
                continue
            
            send_message(message, user_id=user_id)
            
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}Goodbye! üëã")
            break
        except Exception as e:
            print(f"{Fore.RED}Error: {e}")

def main():
    """Main function"""
    print_header()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI Core
    if not check_health():
        return
    
    # ‡πÄ‡∏°‡∏ô‡∏π
    while True:
        print(f"\n{Fore.CYAN}‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        print(f"{Fore.WHITE}1) Run Test Scenarios (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
        print(f"{Fore.WHITE}2) Interactive Chat (‡πÅ‡∏ä‡∏ó‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö)")
        print(f"{Fore.WHITE}3) Single Message Test")
        print(f"{Fore.WHITE}0) Exit")
        
        choice = input(f"\n{Fore.YELLOW}‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-3): {Style.RESET_ALL}")
        
        if choice == "1":
            run_test_scenarios()
        elif choice == "2":
            interactive_mode()
        elif choice == "3":
            message = input(f"{Fore.GREEN}‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {Style.RESET_ALL}")
            if message.strip():
                send_message(message)
        elif choice == "0":
            print(f"{Fore.YELLOW}Goodbye! üëã")
            break
        else:
            print(f"{Fore.RED}Invalid choice!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Goodbye! üëã")