import os
import pickle
import requests
import mysql.connector
import numpy as np
from linebot.v3.messaging import TextMessage

# ‡πÇ‡∏´‡∏•‡∏î environment variables
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_USER = os.getenv('DB_USER', 'root')
DB_PASSWORD = os.getenv('DB_PASSWORD', '')
DB_NAME = os.getenv('DB_NAME', 'your_database')

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Intent Classification
MODEL_PATH = os.getenv('MODEL_PATH', 'thai_intent_model.pkl')

# ===== GLOBAL VARIABLES =====
intent_model = None
model_components = None

try:
    with open(MODEL_PATH, 'rb') as f:
        loaded_data = pickle.load(f)
    
    if isinstance(loaded_data, dict):
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î dict ‡∏à‡∏≤‡∏Å: {MODEL_PATH}")
        print(f"   Keys ‡∏ó‡∏µ‡πà‡∏°‡∏µ: {loaded_data.keys()}")
        
        # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hybrid model
        model_components = loaded_data
        intent_model = 'hybrid'
        print("   ‚Üí ‡πÉ‡∏ä‡πâ Hybrid Model (semantic + tfidf + clf)")
        
    else:
        intent_model = loaded_data
        model_components = None
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Intent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å: {MODEL_PATH}")
        
except FileNotFoundError:
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•: {MODEL_PATH}")
    print("   ‚Üí ‡πÉ‡∏ä‡πâ Rule-based intent classification")
    intent_model = None
    model_components = None
except Exception as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: {e}")
    intent_model = None
    model_components = None


# ==========================
# Database Connection
# ==========================
def get_db_connection():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MySQL Database"""
    try:
        connection = mysql.connector.connect(
            host=DB_HOST,
            user=DB_USER,
            password=DB_PASSWORD,
            database=DB_NAME,
            charset='utf8mb4'
        )
        return connection
    except mysql.connector.Error as err:
        print(f"Database connection error: {err}")
        return None


def get_product_info(product_name=None, limit=5):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å database"""
    conn = get_db_connection()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor(dictionary=True)
        
        if product_name:
            query = """
                SELECT * FROM products 
                WHERE product_name LIKE %s OR description LIKE %s 
                LIMIT %s
            """
            cursor.execute(query, (f'%{product_name}%', f'%{product_name}%', limit))
        else:
            query = "SELECT * FROM products LIMIT %s"
            cursor.execute(query, (limit,))
        
        results = cursor.fetchall()
        cursor.close()
        conn.close()
        return results
    
    except mysql.connector.Error as err:
        print(f"Query error: {err}")
        return []


def get_order_info(user_id=None, order_id=None):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å database"""
    conn = get_db_connection()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor(dictionary=True)
        
        if order_id:
            query = "SELECT * FROM orders WHERE order_id = %s"
            cursor.execute(query, (order_id,))
        elif user_id:
            query = "SELECT * FROM orders WHERE user_id = %s ORDER BY created_at DESC LIMIT 5"
            cursor.execute(query, (user_id,))
        else:
            return []
        
        results = cursor.fetchall()
        cursor.close()
        conn.close()
        return results
    
    except mysql.connector.Error as err:
        print(f"Query error: {err}")
        return []


# ==========================
# OpenRouter API
# ==========================
def call_openrouter_llm(prompt, context=""):
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ OpenRouter LLM API"""
    
    if not OPENROUTER_API_KEY or OPENROUTER_API_KEY == 'your_openrouter_api_key':
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ OPENROUTER_API_KEY - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ")
        return None
    
    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "google/gemini-2.0-flash-exp:free",
                "messages": [
                    {
                        "role": "system",
                        "content": f"‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3-4 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó:\n{context}"
                    },
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 300
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content'].strip()
        else:
            print(f"OpenRouter API Error: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"Error calling OpenRouter: {e}")
        return None


# ==========================
# Intent Prediction
# ==========================
def predict_intent(text):
    """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Intent ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    global intent_model, model_components

    # Hybrid Model
    if intent_model == 'hybrid' and model_components:
        try:
            print("üîç ‡πÉ‡∏ä‡πâ Hybrid Model ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ intent ...")

            # 1. Semantic Features
            semantic_model = model_components['semantic']
            semantic_features = semantic_model.encode([text])

            # 2. TF-IDF Features
            tfidf_vectorizer = model_components['tfidf']
            tfidf_features = tfidf_vectorizer.transform([text]).toarray()

            # 3. Scaling
            scaler_sem = model_components['scaler_sem']
            scaler_tfidf = model_components['scaler_tfidf']

            if scaler_sem:
                semantic_features = scaler_sem.transform(semantic_features)
            if scaler_tfidf:
                tfidf_features = scaler_tfidf.transform(tfidf_features)

            # 4. Combine with weight
            alpha = model_components.get('alpha', 0.5)
            beta = model_components.get('beta', 0.5)

            combined_features = np.hstack([
                alpha * semantic_features,
                beta * tfidf_features
            ])

            # 5. Predict
            clf = model_components['clf']
            intent = clf.predict(combined_features)[0]
            print(f"üéØ Predicted intent: {intent}")
            return intent

        except Exception as e:
            print(f"‚ö†Ô∏è Hybrid model prediction error: {e}")
            print("‚Üí Fallback to Rule-based")

    # Rule-based fallback
    print("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Rule-based fallback")
    text_lower = text.lower()

    if any(word in text_lower for word in ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi', '‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏î‡∏µ‡∏Ñ‡πà‡∏∞']):
        return "greeting"
    elif any(word in text_lower for word in ['‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì', 'thank']):
        return "thank_you"
    elif any(word in text_lower for word in ['‡∏™‡∏±‡πà‡∏á', '‡∏ã‡∏∑‡πâ‡∏≠', 'order', '‡∏à‡∏≠‡∏á']):
        return "order_product"
    elif any(word in text_lower for word in ['‡∏Ñ‡∏∑‡∏ô', 'refund', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô']):
        return "refund_request"
    elif any(word in text_lower for word in ['‡∏ä‡πà‡∏ß‡∏¢', 'help', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°']):
        return "help_request"
    elif any(word in text_lower for word in ['‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏™‡∏ï‡πá‡∏≠‡∏Å', 'price']):
        return "ask_info"
    elif any(word in text_lower for word in ['‡∏£‡∏µ‡∏ß‡∏¥‡∏ß', 'feedback', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥']):
        return "feedback"
    else:
        return "unknown"


# ==========================
# Intent Response
# ==========================
def handle_intent_response(intent, user_message, user_id):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏° Intent ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ"""
    
    if intent == "greeting":
        return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏∞ üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"
    
    elif intent == "thank_you":
        return "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè"
    
    elif intent == "ask_info":
        products = get_product_info(user_message, limit=3)
        if products:
            product_context = "\n".join([
                f"- {p.get('product_name', 'N/A')}: ‡∏£‡∏≤‡∏Ñ‡∏≤ {p.get('price', 'N/A')} ‡∏ö‡∏≤‡∏ó, {p.get('description', '')}"
                for p in products
            ])
            context = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:\n{product_context}"
        else:
            context = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        
        llm_response = call_openrouter_llm(user_message, context)
        return llm_response or "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
    
    elif intent == "order_product":
        orders = get_order_info(user_id=user_id)
        if orders:
            order_context = "\n".join([
                f"- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{o.get('order_id')}: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {o.get('status', 'N/A')}, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {o.get('created_at', 'N/A')}"
                for o in orders[:3]
            ])
            context = f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:\n{order_context}"
        else:
            context = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
        
        llm_response = call_openrouter_llm(user_message, context)
        return llm_response or "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞"
    
    elif intent == "refund_request":
        context = "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô ‡∏´‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á"
        llm_response = call_openrouter_llm(user_message, context)
        return llm_response or "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡πà‡∏∞"
    
    elif intent == "help_request":
        llm_response = call_openrouter_llm(
            user_message,
            "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠, ‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
        )
        return llm_response or "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!"
    
    elif intent == "feedback":
        context = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡πà‡∏∞"
        llm_response = call_openrouter_llm(user_message, context)
        return llm_response or "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Feedback ‡∏Ñ‡∏£‡∏±‡∏ö! üí™"
    
    else:
        llm_response = call_openrouter_llm(user_message, "‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
        return llm_response or "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"


# ==========================
# LINE Message Response
# ==========================
def reponse_message(event):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    user_message = event.message.text.strip()
    user_id = getattr(event.source, 'user_id', None)
    
    intent = predict_intent(user_message)
    print(f"User message: {user_message}")
    print(f"Predicted intent: {intent}")
    
    response_text = handle_intent_response(intent, user_message, user_id)
    
    return TextMessage(text=response_text)
